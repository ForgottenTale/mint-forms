[{"D:\\Projects\\Github\\mint-forms\\pages\\api\\hello.ts":"1","D:\\Projects\\Github\\mint-forms\\pages\\completepayment\\[paymentProvider]\\[orderId].js":"2","D:\\Projects\\Github\\mint-forms\\pages\\confirmation\\[id].tsx":"3","D:\\Projects\\Github\\mint-forms\\pages\\create.tsx":"4","D:\\Projects\\Github\\mint-forms\\pages\\form\\demo.tsx":"5","D:\\Projects\\Github\\mint-forms\\pages\\form\\dynamic.tsx":"6","D:\\Projects\\Github\\mint-forms\\pages\\form\\emergence.tsx":"7","D:\\Projects\\Github\\mint-forms\\pages\\form\\indicon2022.tsx":"8","D:\\Projects\\Github\\mint-forms\\pages\\form\\indicon2022special.tsx":"9","D:\\Projects\\Github\\mint-forms\\pages\\form\\paymentStatus.tsx":"10","D:\\Projects\\Github\\mint-forms\\pages\\form\\pedes2022.tsx":"11","D:\\Projects\\Github\\mint-forms\\pages\\form\\test.tsx":"12","D:\\Projects\\Github\\mint-forms\\pages\\form\\ypupskill.tsx":"13","D:\\Projects\\Github\\mint-forms\\pages\\index.tsx":"14","D:\\Projects\\Github\\mint-forms\\pages\\[formId]\\responses.js":"15","D:\\Projects\\Github\\mint-forms\\pages\\_app.tsx":"16","D:\\Projects\\Github\\mint-forms\\components\\addResponses\\index.js":"17","D:\\Projects\\Github\\mint-forms\\components\\sendMail\\index.js":"18","D:\\Projects\\Github\\mint-forms\\components\\sidebar\\index.tsx":"19","D:\\Projects\\Github\\mint-forms\\components\\topNav\\index.tsx":"20"},{"size":307,"mtime":1660377263858,"results":"21","hashOfConfig":"22"},{"size":3845,"mtime":1663520504029,"results":"23","hashOfConfig":"22"},{"size":6007,"mtime":1665944271398,"results":"24","hashOfConfig":"22"},{"size":3533,"mtime":1661672408914,"results":"25","hashOfConfig":"22"},{"size":25837,"mtime":1664300103125,"results":"26","hashOfConfig":"22"},{"size":4618,"mtime":1661328542681,"results":"27","hashOfConfig":"22"},{"size":16054,"mtime":1666192703558,"results":"28","hashOfConfig":"22"},{"size":27686,"mtime":1666546234726,"results":"29","hashOfConfig":"22"},{"size":18361,"mtime":1666019987335,"results":"30","hashOfConfig":"22"},{"size":4648,"mtime":1665941621309,"results":"31","hashOfConfig":"22"},{"size":19003,"mtime":1666546127552,"results":"32","hashOfConfig":"22"},{"size":8839,"mtime":1666544666266,"results":"33","hashOfConfig":"22"},{"size":12588,"mtime":1666453492981,"results":"34","hashOfConfig":"22"},{"size":318,"mtime":1664276322469,"results":"35","hashOfConfig":"22"},{"size":17723,"mtime":1666175020082,"results":"36","hashOfConfig":"22"},{"size":381,"mtime":1661879610049,"results":"37","hashOfConfig":"22"},{"size":1899,"mtime":1661878828399,"results":"38","hashOfConfig":"22"},{"size":4193,"mtime":1661878875742,"results":"39","hashOfConfig":"22"},{"size":1093,"mtime":1660386473216,"results":"40","hashOfConfig":"22"},{"size":290,"mtime":1660399564478,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xpqc5n",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\Github\\mint-forms\\pages\\api\\hello.ts",[],[],"D:\\Projects\\Github\\mint-forms\\pages\\completepayment\\[paymentProvider]\\[orderId].js",["114"],[],"import axios from 'axios';\nimport Loader from '../../../UI-Components/loader';\nimport { useEffect, useState } from 'react';\nimport Error from '../../../UI-Components/error';\nimport { useRouter } from 'next/router';\nimport displayPaytm from '../../../utils/displayPaytm';\nimport loadScript from '../../../utils/razorpayScript';\n\nexport default function CompletePayment() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [paymentSus, setPaymentSus] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  async function displayRazorpay(data, values) {\n    const res = await loadScript(\n      'https://checkout.razorpay.com/v1/checkout.js'\n    );\n\n    if (!res) {\n      alert('Razorpay SDK failed to load. Are you online?');\n      return;\n    }\n\n    const options = {\n      key: data.key,\n      currency: data.currency,\n      amount: String(data.amount),\n      order_id: data.id,\n      name: 'Indicon 2022',\n      description: 'Thank you for registering',\n\n      handler: async (response) => {\n        try {\n          await axios.post(\n            `/api/pay/razorpay/verify?formId=${router.query.formId}&orderId=${response.razorpay_order_id}`,\n            response\n          );\n          router.push(`/confirmation/${response.razorpay_order_id}`);\n        } catch (err) {\n          setError(true);\n          setErrorMsg(\n            err.response !== undefined ? err.response.data.error : err\n          );\n          setLoading(false);\n        }\n      },\n      prefill: {\n        name: `${values.name}`,\n        email: values.email,\n        contact: data.amount.currency === 'USD' ? '' : `+91${values.phone}`,\n      },\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n    paymentObject.on('payment.failed', async (response) => {\n      try {\n        await axios.post(\n          `/api/pay/razorpay/failed?formId=${router.query.formId}`,\n          response.error\n        );\n        router.push(\n          `/confirmation/${router.query.formId}/${response.error.metadata.order_id}`\n        );\n        paymentObject.close();\n      } catch (err) {\n        setError(true);\n        setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n        setLoading(false);\n      }\n    });\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        if (router.query.paymentProvider === 'razorpay') {\n          var data = await axios.get(\n            `/api/pay/razorpay/orderDetails?orderId=${router.query.orderId}`\n          );\n          if (data.data.status !== 'paid') {\n            displayRazorpay(data.data, data.data.userDetails);\n          } else {\n            setPaymentSus(true);\n          }\n        }\n\n        if (router.query.paymentProvider === 'paytm') {\n          var data2 = await axios.get(\n            `/api/pay/paytm/reinitiate?orderId=${router.query.orderId}`\n          );\n          displayPaytm(data2.data);\n        }\n      } catch (err) {\n        setError(true);\n        setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n        setLoading(false);\n      }\n    }\n    if (router.query.orderId !== undefined) {\n      getData();\n    }\n  }, [router.query.orderId]);\n\n  return (\n    <div>\n      {error ? <Error setError={setError} msg={errorMsg} /> : null}\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : null}\n      {paymentSus ? (\n        <div\n          style={{\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%,-50%)',\n          }}\n        >\n          {/* <img src={src} alt=\"celebrate\"/> */}\n          <p>Payment already made</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","D:\\Projects\\Github\\mint-forms\\pages\\confirmation\\[id].tsx",["115"],[],"import Head from 'next/head';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport styles from '../../styles/Confirmation.module.css';\nimport type { NextPage } from 'next';\nimport moment from 'moment';\n\ntype data = {\n  paymentStatus: string;\n  orderId: string;\n  txnId: string;\n  txnDate: string;\n  amount: string;\n};\ninterface props {\n  title: string;\n  responses: Array<data>;\n  eventDate: string;\n  venue: string;\n  formId: string;\n}\n\nconst Confirmation: NextPage = () => {\n  const router = useRouter();\n  const [data, setData] = useState<props>({\n    title: '',\n    responses: [],\n    venue: '',\n    eventDate: '',\n    formId: '',\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const getData = async () => {\n    if (router.query.id !== undefined) {\n      try {\n        const res = await axios.get(\n          `/api/pay/confirmation?orderId=${router.query.id}`\n        );\n        setLoading(false);\n        setData(res.data);\n      } catch (err: any) {\n        setError(true);\n        setErrorMsg(\n          err.response !== undefined ? err.response.data.error : String(err)\n        );\n        // setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [router.query.id, router.query.type]);\n\n  return (\n    <main className=\"main\">\n      <Head>\n        <title>Confirmation</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <div className={styles.eventform}>\n        {error ? <Error setError={setError} msg={errorMsg} /> : null}\n        {loading ? (\n          <Loader msg=\"Loading receipt details\" />\n        ) : (\n          <div className={styles.eventform_con}>\n            <div className={styles.eventdetails}>\n              <p className={styles.eventdetails_dnt}>\n                Event Registration Confirmation\n              </p>\n              <h3 className={styles.eventdetails_title}>{data.title}</h3>\n              {data.responses !== undefined &&\n              data.responses[0].paymentStatus === 'success' ? (\n                <p className={styles.eventdetails_des}>\n                  Thank you for registering for the event. A copy of the receipt\n                  has been sent to your registered email\n                </p>\n              ) : (\n                <p className={styles.eventdetails_des}>\n                  {data.responses[0].paymentStatus === undefined\n                    ? ''\n                    : data.responses !== undefined &&\n                      data.responses[0].paymentStatus !== 'failed'\n                    ? 'The payment is yet to be recieved'\n                    : 'The transaction has failed'}\n                </p>\n              )}\n              {/* <p className={styles.confirm}></p> */}\n            </div>\n            <div className={styles.paymentDetails}>\n              <p className={styles.paymentDetails_title}>Payment Details</p>\n              {data.responses !== undefined ? (\n                <div className={styles.paymentDetails_grid}>\n                  {data.responses[0].orderId !== undefined ? (\n                    <>\n                      <p>Order Id</p> <p>{data.responses[0].orderId}</p>\n                    </>\n                  ) : null}\n                  {data.responses[0].txnId !== undefined ? (\n                    <>\n                      <p>Transaction Id</p>{' '}\n                      <p className={styles.txn}>{data.responses[0].txnId}</p>\n                    </>\n                  ) : null}\n                  {data.responses[0].paymentStatus !== undefined ? (\n                    <>\n                      <p>Payment Status</p>{' '}\n                      <p className={styles[data.responses[0].paymentStatus]}>\n                        {data.responses[0].paymentStatus}\n                      </p>\n                    </>\n                  ) : null}\n                  {data.responses[0].amount !== undefined ? (\n                    <>\n                      <p>Amount</p>{' '}\n                      <p>\n                        {JSON.parse(data.responses[0].amount).currency}{' '}\n                        {JSON.parse(data.responses[0].amount).amount}\n                      </p>\n                    </>\n                  ) : null}\n                  {data.responses[0].txnDate !== undefined ? (\n                    <>\n                      <p>Date and time</p>{' '}\n                      <p>\n                        {moment(data.responses[0].txnDate).format(\n                          'D MMM YYYY h:mm:ss a'\n                        )}\n                      </p>\n                    </>\n                  ) : null}\n                </div>\n              ) : null}\n            </div>\n            {data.venue !== undefined ? (\n              <div className={styles.paymentDetails}>\n                <p className={styles.paymentDetails_title}>Event Details</p>\n                <div className={styles.paymentDetails_grid}>\n                  <p>Date</p>{' '}\n                  <p>{moment(data.eventDate).format('D MMM YYYY')}</p>\n                  <p>Venue</p> <p>{data.venue}</p>\n                  {/* <p>Amount</p> <p>Rs 10.00</p>\n                                <p>Date</p> <p>12th Mar 2022 11:00 PM IST</p> */}\n                </div>\n              </div>\n            ) : null}\n\n            <div className={styles.buttons}>\n              <button className={styles.button} onClick={() => window.print()}>\n                Print\n              </button>\n              <button\n                className={styles.button}\n                onClick={() => router.push(`/form/${data.formId}`)}\n              >\n                Submit another\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n};\nexport default Confirmation;\n","D:\\Projects\\Github\\mint-forms\\pages\\create.tsx",["116"],[],"import type { NextPage } from 'next';\nimport ToggleButton from '../UI-Components/toggleButton';\nimport FormInput from '../UI-Components/FormInput';\nimport styles from '../styles/Create.module.css';\nimport FormsAdminLayout from '../layout/FormsAdminLayout';\nimport FormRadioButton from '../UI-Components/RadioButton';\nimport FormTextArea from '../UI-Components/FormTextArea';\nimport Select from 'react-select';\nimport { useState } from 'react';\n\ninterface dataType{\n  type: string;\n}\n\ninterface FormItemProps {\n  data: dataType;\n  index: number;\n  array: Array<MyType>;\n  setData:Function\n}\ntype MyType = {\n  type: string;\n};\ntype MyGroupType = {\n  [key: string]: MyType;\n};\ninterface CreateTypes {\n  [key: string]: Array<MyGroupType>;\n}\n\nconst FormItem: React.FunctionComponent<FormItemProps> = ({\n  data,\n  array,\n  index,\n  setData\n}) => {\n  const [type, setType] = useState('shortAnswer');\n  // console.log(data)\n\n  function deleteItem() {\n    const ind= array.indexOf(data);\n  \n    if (ind > -1) {\n      setData([array.splice(ind, 1)]); \n    }\n  }\n\n  const options = [\n    { label: 'Checkbox', value: 'choice' },\n    { label: 'Long answer', value: 'longAnswer' },\n    { label: 'Short answer', value: 'shortAnswer' },\n  ];\n\n  return (\n    <div className={styles.inputField}>\n      <div className={styles.inputField_con}>\n        <input className={styles.inputField_ques} defaultValue=\"Question\" />\n        <Select\n          options={options}\n          defaultValue={{ label: 'Short answer', value: 'shortAnswer' }}\n          onChange={(e) => {\n            setType(e!.value);\n          }}\n        />\n      </div>\n      {}\n      {type === 'shortAnswer' ? (\n        <FormInput\n          label=\"\"\n          placeholder=\"Enter your answers\"\n          onChange={() => setType('shortAnswer')}\n          value=\"HI\"\n          // name=\"DFDSFSD\"\n          errors=\"DASFA\"\n        />\n      ) : null}\n      {type === 'longAnswer' ? (\n        <FormTextArea\n          label=\"\"\n          placeholder=\"Enter your answers\"\n          onChange={() => setType('longAnswer')}\n          value=\"HI\"\n          name=\"DFDSFSD\"\n          errors=\"DASFA\"\n        />\n      ) : null}\n      {type === 'choice' ? (\n        <FormRadioButton\n          label=\"Question\"\n          checked={true}\n          onClick={() => setType('longAnswer')}\n        />\n      ) : null}\n      <div className={styles.inputField_con}>\n        <ToggleButton\n          state={false}\n          onChange={() => console.log()}\n          label=\"Required\"\n        />\n        <ToggleButton\n          state={true}\n          onChange={() => console.log()}\n          label=\"Long answer\"\n        />\n        <div onClick={()=>deleteItem()}>Remove</div>\n      </div>\n    </div>\n  );\n};\n\nconst Create: NextPage<CreateTypes> = () => {\n  const [data, setData] = useState([[{ type: 'checkbox' }]]);\n\n  return (\n    <FormsAdminLayout>\n      <div className={styles.container}>\n        <input className={styles.title} defaultValue={'Untitled Form'} />\n        {data[0].map((item, key) => (\n          <FormItem key={key} data={item} setData={setData} array={data[0]} index={key} />\n        ))}\n        <div>\n          <button\n            onClick={() => {\n              let a = data;\n              a[0].push({ type: 'shortAnswer' });\n              console.log(a);\n              setData([a[0]]);\n            }}\n          >\n            Add new\n          </button>\n        </div>\n        {/* <h6 className={styles.title}>Untitled Form</h6> */}\n      </div>\n    </FormsAdminLayout>\n  );\n};\n\nexport default Create;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\demo.tsx",["117","118","119","120"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, useFormikContext, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport FormOptions from '../../UI-Components/FormOptions';\nimport { useEffect, useState, useRef } from 'react';\nimport loadScript from '../../utils/razorpayScript';\nimport { useRouter } from 'next/router';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport getIndiconPrice from '../../utils/getIndiconPrice';\nimport { getPaperPrice, getPaperSinglePrice } from '../../utils/getPaperPrice';\nimport {\n  getExtraPagesPrice,\n  getNumOfAdditionalPages,\n  getSingleAdditionalPagePrice,\n} from '../../utils/getExtraPagesPrice';\nimport getTotalPrice from '../../utils/getTotalPrice';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport displayPaytm from '../../utils/displayPaytm';\nimport PhoneSelector from '../../UI-Components/PhoneSelector';\nimport FormSelect from '../../UI-Components/FormSelect';\nimport FormIEEE from '../../UI-Components/FormIEEE';\nimport getCountryList from '../../utils/getCountryList';\nimport * as yup from 'yup';\n\nconst Form: NextPage = () => {\n  const router = useRouter();\n  const [authorPrice, setAuthorPrice] = useState(9000);\n  const [addPapers, setAddPapers] = useState(0);\n  const [pages, setPages] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  const [initialVal, setIntialVal] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    ieeeMember: '',\n    membershipId: '',\n    validIEEE: '',\n    address: '',\n    gender: '',\n    country: '',\n    state: '',\n    pincode: '',\n    food: '',\n    institute: '',\n    designation: '',\n    category: '',\n    papers: '1',\n    paperId1: '',\n    extraPage1: '',\n    paperId2: '',\n    extraPage2: '',\n    paperId3: '',\n    extraPage3: '',\n    passport: '',\n  });\n  // const [initialVal, setIntialVal] = useState({\n  //   name: 'Test ',\n  //   email: 'abhijithkannan452@gmail.com',\n  //   phone: '+917025263554',\n  //   ieeeMember: 'No',\n  //   validIEEE: '',\n  //   institute: 'CEK',\n  //   designation: 'CEK',\n  //   address: 'XYZ Houser',\n  //   gender: 'Male',\n  //   country: 'India',\n  //   state: 'Kerala',\n  //   pincode: '686019',\n  //   food: 'Veg',\n  //   category: 'Indian Author (Academia)',\n  //   paperId1: 'asdas',\n  //   extraPage1: 'Not applicable',\n  //   paperId2: '',\n  //   extraPage2: '',\n  //   paperId3: '',\n  //   extraPage3: '',\n  //   papers: '1',\n  // });\n\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required().email(),\n    phone: yup.string().required(),\n    ieeeMember: yup.string().required(),\n    validIEEE: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required('Verify membership ID'),\n    }),\n    address: yup.string().required(),\n    gender: yup.string().required(),\n    country: yup.string().required(),\n    state: yup.string().required(),\n    food: yup.string().required(),\n    pincode: yup.string().required(),\n    institute: yup.string().required(),\n    designation: yup.string().required(),\n    category: yup.string().required(),\n    paperId1: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) > 0,\n      then: yup.string().required(),\n    }),\n    extraPage1: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) > 0,\n      then: yup.string().required('Required'),\n    }),\n    paperId2: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 2,\n      then: yup.string().required(),\n    }),\n    extraPage2: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 2,\n      then: yup.string().required(),\n    }),\n    paperId3: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 3,\n      then: yup.string().required(),\n    }),\n    extraPage3: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 3,\n      then: yup.string().required('Required'),\n    }),\n    papers: yup.string().required(),\n    membershipId: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required(),\n    }),\n    passport: yup.string().when('category', {\n      is: (category: any) =>\n        category !== undefined && category.includes('Foreign'),\n      then: yup.string().required(),\n    }),\n  });\n\n  const PriceUpdater: Function = () => {\n    const { values, setFieldValue } = useFormikContext<any>();\n    const didMount = useRef(false);\n    useEffect(() => {\n      if (didMount.current) {\n        if (values.papers === 'Not applicable') {\n          setFieldValue('paperId1', '');\n          setFieldValue('paperId2', '');\n          setFieldValue('paperId3', '');\n          setFieldValue('extraPage1', '');\n          setFieldValue('extraPage2', '');\n          setFieldValue('extraPage3', '');\n        }\n        if (Number(values.papers) === 1) {\n          setFieldValue('paperId2', '');\n          setFieldValue('paperId3', '');\n          setFieldValue('extraPage2', '');\n          setFieldValue('extraPage3', '');\n        }\n        if (Number(values.papers) === 2) {\n          setFieldValue('paperId3', '');\n          setFieldValue('extraPage3', '');\n        }\n\n        setAuthorPrice(getIndiconPrice(values));\n        setAddPapers(getPaperPrice(values));\n        setPages(getExtraPagesPrice(values));\n        console.log(getPaperPrice(values));\n      } else {\n        didMount.current = true;\n      }\n    }, [\n      values.papers,\n      values.ieeeMember,\n      values.category,\n      values.extraPage1,\n      values.extraPage2,\n      values.extraPage3,\n    ]);\n  };\n  async function displayRazorPay(data: any, values: any) {\n    const res = await loadScript();\n\n    if (!res) {\n      alert('Razorpay SDK failed to load. Are you online?');\n      return;\n    }\n\n    const options = {\n      key: data.key,\n      currency: data.currency,\n      amount: String(data.amount),\n      order_id: data.id,\n      name: 'Indicon 2022',\n      description: 'Thank you for registering',\n\n      handler: async (response: any) => {\n        try {\n          await axios.post(\n            `/api/pay/razorpay/verify?formId=demo&orderId=${response.razorpay_order_id}`,\n            response\n          );\n          router.push(`/confirmation/${response.razorpay_order_id}`);\n        } catch (err: any) {\n          setError(true);\n          setErrorMsg(\n            err.response !== undefined ? err.response.data.error : err\n          );\n          setLoading(false);\n        }\n      },\n      prefill: {\n        name: `${values.name}`,\n        email: values.email,\n        contact: `${values.phone}`,\n      },\n    };\n    const paymentObject = new (window as any).Razorpay(options);\n    paymentObject.open();\n    paymentObject.on('payment.failed', async (response: any) => {\n      try {\n        await axios.post(\n          `/api/pay/razorpay/failed?formId=demo`,\n          response.error\n        );\n        router.push(`/confirmation/${response.error.metadata.order_id}`);\n        paymentObject.close();\n      } catch (err: any) {\n        setError(true);\n        setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n        setLoading(false);\n      }\n    });\n  }\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      var data = values;\n      data.membershipType = values.ieeeMember\n        ? 'IEEE Member'\n        : 'Non IEEE Member';\n      data.amount = JSON.stringify({\n        currency: values.category.includes('Foreign') ? 'USD' : 'INR',\n        amount: getTotalPrice(authorPrice + addPapers + pages, values),\n      });\n\n      const formData = buildForm(data);\n\n    \n        const res = await axios.post(\n          '/api/pay/paytm?formId=demo',\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n\n        displayPaytm(res.data);\n     \n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  const catgory =\n    process.env.NODE_ENV === 'production'\n      ? [\n          'Indian Author (Academia)',\n          'Indian Author (Industry)',\n          'Indian Student Author',\n          'Indian Non-Author Attendee',\n          'Foreign Author',\n          'Foreign Student Author',\n        ]\n      : [\n          'Indian Author (Academia)',\n          'Indian Author (Industry)',\n          'Indian Student Author',\n          'Indian Non-Author Attendee',\n          'Indian Test Category',\n          'Foreign Author',\n          'Foreign Student Author',\n          'Foreign Test Category',\n        ];\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>Demo</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : (\n        <div className={styles.formContainer}>\n          <img className={styles.formBanner} src=\"/indicon2.png\" />\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>DEMO</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Full name *\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={(e: any) => setFieldValue('name', e.target.value)}\n                    errors={\n                      getIn(errors, 'name') !== undefined\n                        ? getIn(errors, 'name')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Email *\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={(e: any) =>\n                      setFieldValue('email', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'email') !== undefined\n                        ? getIn(errors, 'email')\n                        : ''\n                    }\n                  />\n\n                  <PhoneSelector\n                    label=\"Phone *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={(e: any) => setFieldValue('phone', e)}\n                    errors={\n                      getIn(errors, 'phone') !== undefined\n                        ? getIn(errors, 'phone')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Gender*\"\n                    options={['Male', 'Female']}\n                    value={values.gender}\n                    onChange={(e: any) => setFieldValue('gender', e)}\n                    errors={\n                      getIn(errors, 'gender') !== undefined\n                        ? getIn(errors, 'gender')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Permanent address *\"\n                    placeholder=\"Enter your permanent address\"\n                    value={values.address}\n                    onChange={(e: any) =>\n                      setFieldValue('address', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'address') !== undefined\n                        ? getIn(errors, 'address')\n                        : ''\n                    }\n                  />\n                  <FormSelect\n                    label=\"Country *\"\n                    options={getCountryList}\n                    value={{ label: values.country, value: values.country }}\n                    onChange={(e: any) => setFieldValue('country', e.value)}\n                    errors={\n                      getIn(errors, 'country') !== undefined\n                        ? getIn(errors, 'country')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"State/Province *\"\n                    placeholder=\"Enter your state or province\"\n                    value={values.state}\n                    onChange={(e: any) =>\n                      setFieldValue('state', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'state') !== undefined\n                        ? getIn(errors, 'state')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Pincode *\"\n                    placeholder=\"Enter your pincode\"\n                    value={values.pincode}\n                    onChange={(e: any) =>\n                      setFieldValue('pincode', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'pincode') !== undefined\n                        ? getIn(errors, 'pincode')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Institute *\"\n                    placeholder=\"Enter your institution\"\n                    value={values.institute}\n                    onChange={(e: any) =>\n                      setFieldValue('institute', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'institute') !== undefined\n                        ? getIn(errors, 'institute')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Designation *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.designation}\n                    onChange={(e: any) =>\n                      setFieldValue('designation', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'designation') !== undefined\n                        ? getIn(errors, 'designation')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Are you an IEEE Member*\"\n                    options={['Yes', 'No']}\n                    value={values.ieeeMember}\n                    onChange={(e: any) => setFieldValue('ieeeMember', e)}\n                    errors={\n                      getIn(errors, 'ieeeMember') !== undefined\n                        ? getIn(errors, 'ieeeMember')\n                        : ''\n                    }\n                  />\n                  <FormIEEE\n                    label=\"If yes, enter your membership ID\"\n                    placeholder=\"Enter your IEEE Membership ID \"\n                    value={values.membershipId}\n                    onChange={(e: any) =>\n                      setFieldValue('membershipId', e.target.value)\n                    }\n                    onChangeValid={(e: any) => setFieldValue('validIEEE', e)}\n                    errors={\n                      getIn(errors, 'membershipId') !== undefined\n                        ? getIn(errors, 'membershipId')\n                        : ''\n                    }\n                    vaildError={\n                      getIn(errors, 'validIEEE') !== undefined\n                        ? getIn(errors, 'validIEEE')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Food preference *\"\n                    options={['Veg', 'Non Veg']}\n                    value={values.food}\n                    onChange={(e: any) => setFieldValue('food', e)}\n                    errors={\n                      getIn(errors, 'food') !== undefined\n                        ? getIn(errors, 'food')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Number of papers*\"\n                    options={['1', '2', '3', 'Not applicable']}\n                    value={values.papers}\n                    onChange={(e: any) => setFieldValue('papers', e)}\n                    errors={\n                      getIn(errors, 'papers') !== undefined\n                        ? getIn(errors, 'papers')\n                        : ''\n                    }\n                  />\n                  {Number(values.papers) > 0 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 1*\"\n                        placeholder=\"Enter your paper id 1\"\n                        value={values.paperId1}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId1', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId1') !== undefined\n                            ? getIn(errors, 'paperId1')\n                            : ''\n                        }\n                      />\n                      <FormOptions\n                        label=\"Whether the paper 1 has exceed the 6 page limit ? if yes by how many extra pages ?*\"\n                        options={['Not applicable', '1', '2']}\n                        value={values.extraPage1}\n                        onChange={(e: any) => setFieldValue('extraPage1', e)}\n                        errors={\n                          getIn(errors, 'extraPage1') !== undefined\n                            ? getIn(errors, 'extraPage1')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n                  {Number(values.papers) >= 2 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 2*\"\n                        placeholder=\"Enter your paper id 2\"\n                        value={values.paperId2}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId2', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId2') !== undefined\n                            ? getIn(errors, 'paperId2')\n                            : ''\n                        }\n                      />\n                      <FormOptions\n                        label=\"Whether the paper 2 has exceed the 6 page limit ? if yes by how many extra pages ?*\"\n                        options={['Not applicable', '1', '2']}\n                        value={values.extraPage2}\n                        onChange={(e: any) => setFieldValue('extraPage2', e)}\n                        errors={\n                          getIn(errors, 'extraPage2') !== undefined\n                            ? getIn(errors, 'extraPage2')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n                  {Number(values.papers) >= 3 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 3*\"\n                        placeholder=\"Enter your paper id 3\"\n                        value={values.paperId3}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId3', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId3') !== undefined\n                            ? getIn(errors, 'paperId3')\n                            : ''\n                        }\n                      />\n                      <FormOptions\n                        label=\"Whether the paper 3 has exceed the 6 page limit ? if yes by how many extra pages ?*\"\n                        options={['Not applicable', '1', '2']}\n                        value={values.extraPage3}\n                        onChange={(e: any) => setFieldValue('extraPage3', e)}\n                        errors={\n                          getIn(errors, 'extraPage3') !== undefined\n                            ? getIn(errors, 'extraPage3')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n                  <FormOptions\n                    label=\"Category *\"\n                    options={catgory}\n                    value={values.category}\n                    onChange={(e: any) => setFieldValue('category', e)}\n                    errors={\n                      getIn(errors, 'category') !== undefined\n                        ? getIn(errors, 'category')\n                        : ''\n                    }\n                  />\n                  {values.category !== undefined &&\n                  values.category.includes('Foreign') ? (\n                    <FormInput\n                      label=\"Passport number *\"\n                      placeholder=\"Enter your passport number\"\n                      value={values.passport}\n                      onChange={(e: any) =>\n                        setFieldValue('passport', e.target.value)\n                      }\n                      errors={\n                        getIn(errors, 'passport') !== undefined\n                          ? getIn(errors, 'passport')\n                          : ''\n                      }\n                    />\n                  ) : null}\n\n                  <PriceUpdater />\n                  <h4 className={styles.breakDownLabel}>\n                    Amount based on chosen catgory\n                  </h4>\n                  <h5 className={styles.singlePrice}>\n                    {values.category.includes('Foreign') ? '$ ' : 'Rs '}\n                    {authorPrice}\n                  </h5>\n                  <h4 className={styles.breakDownLabel}>\n                    Amount based on number of the additional papers\n                  </h4>\n                  <h5 className={styles.singlePrice}>\n                    {`${getPaperSinglePrice(values)} * ${\n                      isNaN(values.papers) ? 0 : Number(values.papers) - 1\n                    } = `}\n                    {values.category.includes('Foreign') ? '$ ' : 'Rs '}\n                    {addPapers}\n                  </h5>\n                  <h4 className={styles.breakDownLabel}>\n                    Amount based on additional pages for each paper\n                  </h4>\n                  <h5 className={styles.singlePrice}>\n                    {`${getSingleAdditionalPagePrice(\n                      values\n                    )} * ${getNumOfAdditionalPages(values)} = `}\n                    {values.category.includes('Foreign') ? '$ ' : 'Rs '}\n                    {pages}\n                  </h5>\n                  <h4 className={styles.breakDownLabel}>Amount to be paid</h4>\n                  <h5 className={styles.singlePrice}>\n                    {values.category.includes('Foreign') ? '$ ' : 'Rs '}\n                    {authorPrice + addPapers + pages}\n                  </h5>\n                  <h4 className={styles.priceLabel}>\n                    Total amount (\n                    <i>\n                      18% GST and{' '}\n                      {values.category.includes('Foreign') ? '3.2%' : '2.2%'}{' '}\n                      convenience fee included\n                    </i>\n                    )\n                  </h4>\n                  <h5 className={styles.price}>\n                    {values.category.includes('Foreign') ? '$ ' : 'Rs '}\n                    {getTotalPrice(authorPrice + addPapers + pages, values)}\n                  </h5>\n                  <br />\n                  {/* {JSON.stringify(errors, null, 2)} */}\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\dynamic.tsx",["121","122"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport generateFormIntialValues from '../../utils/generateFormIntialValues.js';\n\ntype typeStructure = {\n  componentId: string;\n  type: string;\n  label: string;\n  required: boolean;\n  validate: string;\n};\ninterface typeFormInfo {\n  title: string;\n  description: string;\n  subTitle: string;\n  banner: string;\n  structure: Array<typeStructure[]>;\n}\n\nconst Form: NextPage = () => {\n  const formInfo: typeFormInfo = {\n    title: '',\n    description: '',\n    subTitle: '',\n    banner: '',\n    structure: [\n      [\n        {\n          componentId: 'G363944IPGU',\n          type: 'input',\n          label: 'Full name',\n          required: true,\n          validate: 'string',\n        },\n        {\n          componentId: 'G3639446954',\n          type: 'input',\n          label: 'Email',\n          required: true,\n          validate: 'string',\n        },\n        {\n          componentId: 'G36sd6449848',\n          type: 'input',\n          label: 'Phone number',\n          required: true,\n          validate: 'string',\n        },\n        {\n          componentId: 'G36UI4854178',\n          type: 'input',\n          label: 'Institution',\n          required: true,\n          validate: 'string',\n        },\n        {\n          componentId: 'G36MBVFK86368',\n          type: 'input',\n          label: 'Designation',\n          required: true,\n          validate: 'string',\n        }\n      ],\n    ],\n  };\n\n  return (\n    <div className={styles.form}>\n      <div className={styles.formContainer}>\n        <img className={styles.formBanner} src=\"/banner.jpeg\" />\n        <div className={styles.formDetails}>\n          <p className={styles.subTitle}>REGISTRATION FORM</p>\n          <h1 className={styles.formTitle}>IEEE Job Fair</h1>\n          <p className={styles.formDescription}>\n            To ride a vehicle I worked on back home in New Zealand has always\n            been a dream, to share it with so many like minded people at Ducati\n            Owners Club NZ is even better. Credit to Aaron Staples for the great\n            shots.\n          </p>\n        </div>\n        <div className={styles.formContent}>\n          <Formik\n            initialValues={generateFormIntialValues(formInfo.structure)}\n            onSubmit={() => console.log(generateFormIntialValues(formInfo.structure))}\n          >\n            {({\n              values,\n              errors,\n              handleSubmit,\n              setFieldValue,\n            }: FormikProps<any>) => (\n              <div>\n                {formInfo.structure[0].map((item, key) => (\n                  <div key={key}>\n                    {item.type === 'input' ? (\n                      <FormInput\n                        label={item.label}\n                        placeholder=\"\"\n                        value={values[item.componentId]}\n                        onChange={(e: any) =>\n                          setFieldValue(item.componentId, e.target.value)\n                        }\n                        errors={\n                          getIn(errors, item.componentId) !== undefined\n                            ? getIn(errors, item.componentId) !== undefined\n                            : ''\n                        }\n                      />\n                    ) : null}\n                  </div>\n                ))}\n                {JSON.stringify(values, null, 2)}\n                <button\n                  className={styles.button}\n                  type=\"submit\"\n                  onClick={() => handleSubmit()}\n                >\n                  SUBMIT\n                </button>\n              </div>\n            )}\n          </Formik>\n\n          <footer className={styles.footer}>\n            <p>\n              This content is created by the owner of the form. The data you\n              submit will be sent to the form owner. IEEE Kerala Section is not\n              responsible for the privacy or security practices of its\n              customers, including those of this form owner. Never give out your\n              password.\n            </p>\n            <br />\n            Powered by IKS Mint Forms |{' '}\n            <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n              Privacy and cookies\n            </a>{' '}\n            |{' '}\n            <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n              Terms of use\n            </a>\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\emergence.tsx",["123","124","125","126"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport FormOptions from '../../UI-Components/FormOptions';\nimport { useState } from 'react';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport {\n  getEmergencePrice,\n  getEmergenceTotalPrice,\n} from '../../utils/getEmergencePrice';\nimport districtList from '../../utils/getDistrictList';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport displayPaytm from '../../utils/displayPaytm';\nimport PhoneSelector from '../../UI-Components/PhoneSelector';\nimport FormSelect from '../../UI-Components/FormSelect';\nimport FormIEEE from '../../UI-Components/FormIEEE';\nimport * as yup from 'yup';\n\ninterface types {\n  expiryDate: string;\n  responses: any;\n  earlybird: any;\n}\n\nconst Form: NextPage<types> = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  const [initialVal, setIntialVal] = useState({\n    name: '',\n    email: '',\n    gender: '',\n    district: '',\n    phone: '',\n    institute: '',\n    ieeeMember: '',\n    validIEEE: '',\n    workshop: '',\n    iv: '',\n    food: '',\n    accomodation: '',\n    ieee: '',\n    ias: 'false',\n    category: '',\n    promocode: '',\n  });\n  // const [initialVal, setIntialVal] = useState({\n  //   name: 'test',\n  //   email: 'abhijithkannan452@gmail.com',\n  //   gender: 'Male',\n  //   district: 'India',\n  //   phone: '+917025263554',\n  //   institute: 'CEK',\n  //   ieeeMember: 'No',\n  //   validIEEE: '',\n  //   workshop: 'Project Development Workshop',\n  //   iv: 'ALIND Switchgear Indsutries, Mannar',\n  //   food: 'Veg',\n  //   accomodation: 'Yes',\n  //   ieee: '',\n  //   ias: 'false',\n  // });\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required().email(),\n    gender: yup.string().required(),\n    district: yup.string().required(),\n    phone: yup.string().required(),\n    institute: yup.string().required(),\n    ieeeMember: yup.string().required(),\n    validIEEE: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required('Verify membership ID'),\n    }),\n    workshop: yup.string().required(),\n    iv: yup.string().required(),\n    food: yup.string().required(),\n    ias: yup.string(),\n    ieee: yup.string(),\n    accomodation: yup.string().required(),\n    category: yup.string().required(),\n    promocode: yup.string(),\n  });\n  const getCategory = (values: any) => {\n    if (values.ias === 'true') {\n      return new Date().toISOString() < props.earlybird\n        ? ['IAS Member Rs 450']\n        : ['IAS Member Rs 600'];\n    } else if (values.validIEEE === 'true') {\n      return new Date().toISOString() < props.earlybird\n        ? ['IEEE Member Rs 550']\n        : ['IEEE Member Rs 700'];\n    } else {\n      return new Date().toISOString() < props.earlybird\n        ? ['Non-IEEE Member Rs 700']\n        : ['Non-IEEE Member Rs 850'];\n    }\n  };\n\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      var data = values;\n      data.amount = JSON.stringify({\n        currency: 'INR',\n        amount: getEmergenceTotalPrice(\n          getEmergencePrice(values, props.earlybird)\n        ),\n        fee: (\n          getEmergenceTotalPrice(getEmergencePrice(values, props.earlybird)) -\n          getEmergencePrice(values, props.earlybird)\n        ).toFixed(2),\n        ownerAmt: getEmergencePrice(values, props.earlybird),\n      });\n\n      const formData = buildForm(data);\n\n      const res = await axios.post(\n        '/api/pay/paytm?formId=emergence',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n\n      displayPaytm(res.data);\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>EMERGENCE 2.0</title>\n        {/* <link rel=\"icon\" type=\"image/x-icon\" href=\"/images/favicon.ico\"></link> */}\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : new Date().toISOString() < props.expiryDate ? (\n        <div className={styles.formContainer}>\n          <img className={styles.formBanner} src=\"/emergence.webp\" />\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>EMERGENCE 2.0</h1>\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Full name *\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={(e: any) => setFieldValue('name', e.target.value)}\n                    errors={\n                      getIn(errors, 'name') !== undefined\n                        ? getIn(errors, 'name')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Email *\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={(e: any) =>\n                      setFieldValue('email', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'email') !== undefined\n                        ? getIn(errors, 'email')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Gender*\"\n                    options={['Male', 'Female']}\n                    value={values.gender}\n                    onChange={(e: any) => setFieldValue('gender', e)}\n                    errors={\n                      getIn(errors, 'gender') !== undefined\n                        ? getIn(errors, 'gender')\n                        : ''\n                    }\n                  />\n                  <FormSelect\n                    label=\"District *\"\n                    options={districtList}\n                    value={{ label: values.district, value: values.district }}\n                    onChange={(e: any) => setFieldValue('district', e.value)}\n                    errors={\n                      getIn(errors, 'district') !== undefined\n                        ? getIn(errors, 'district')\n                        : ''\n                    }\n                  />\n                  <PhoneSelector\n                    label=\"Phone *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={(e: any) => setFieldValue('phone', e)}\n                    errors={\n                      getIn(errors, 'phone') !== undefined\n                        ? getIn(errors, 'phone')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Institute *\"\n                    placeholder=\"Enter your institution\"\n                    value={values.institute}\n                    onChange={(e: any) =>\n                      setFieldValue('institute', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'institute') !== undefined\n                        ? getIn(errors, 'institute')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Workshop Preference *\"\n                    options={[\n                      'Rapid Prototyping',\n                      'Introduction to PVsyst',\n                      'IOT Candle Workshop',\n                    ]}\n                    value={values.workshop}\n                    onChange={(e: any) => setFieldValue('workshop', e)}\n                    errors={\n                      getIn(errors, 'workshop') !== undefined\n                        ? getIn(errors, 'workshop')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"IV Preference *\"\n                    options={[\n                      'ALIND Switchgear Indsutries, Mannar',\n                      'TRACO Cable Company, Thiruvalla',\n                    ]}\n                    value={values.iv}\n                    onChange={(e: any) => setFieldValue('iv', e)}\n                    errors={\n                      getIn(errors, 'iv') !== undefined\n                        ? getIn(errors, 'iv')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Do you want accomodation ? *\"\n                    options={['Yes', 'No']}\n                    value={values.accomodation}\n                    onChange={(e: any) => setFieldValue('accomodation', e)}\n                    errors={\n                      getIn(errors, 'accomodation') !== undefined\n                        ? getIn(errors, 'accomodation')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Food preference *\"\n                    options={['Veg', 'Non Veg']}\n                    value={values.food}\n                    onChange={(e: any) => setFieldValue('food', e)}\n                    errors={\n                      getIn(errors, 'food') !== undefined\n                        ? getIn(errors, 'food')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Are you an IEEE Member*\"\n                    options={['Yes', 'No']}\n                    value={values.ieeeMember}\n                    onChange={(e: any) => setFieldValue('ieeeMember', e)}\n                    errors={\n                      getIn(errors, 'ieeeMember') !== undefined\n                        ? getIn(errors, 'ieeeMember')\n                        : ''\n                    }\n                  />\n                  <FormIEEE\n                    label=\"If yes, enter your membership ID\"\n                    placeholder=\"Enter your IEEE Membership ID \"\n                    value={values.membershipId}\n                    onChange={(e: any) =>\n                      setFieldValue('membershipId', e.target.value)\n                    }\n                    onChangeValid={(e: any, SocietyList: any) => {\n                      setFieldValue('validIEEE', e);\n                      setFieldValue(\n                        'ias',\n                        SocietyList.includes('MEMIA034') ? 'true' : 'false'\n                      );\n                      setFieldValue('ieee', SocietyList);\n                    }}\n                    errors={\n                      getIn(errors, 'membershipId') !== undefined\n                        ? getIn(errors, 'membershipId')\n                        : ''\n                    }\n                    vaildError={\n                      getIn(errors, 'validIEEE') !== undefined\n                        ? getIn(errors, 'validIEEE')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Category *\"\n                    options={getCategory(values)}\n                    value={values.category}\n                    onChange={(e: any) => setFieldValue('category', e)}\n                    errors={\n                      getIn(errors, 'category') !== undefined\n                        ? getIn(errors, 'category')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Promo code *\"\n                    placeholder=\"Enter promo code\"\n                    value={values.promocode}\n                    onChange={(e: any) =>\n                      setFieldValue('promocode', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'promocode') !== undefined\n                        ? getIn(errors, 'promocode')\n                        : ''\n                    }\n                  />\n                  <h4 className={styles.breakDownLabel}>\n                    Amount based on chosen catgory\n                  </h4>\n                  <h5 className={styles.singlePrice}>\n                    {/* {values.category.includes('Foreign') ? '$ ' : 'Rs '} */}\n                    {getEmergencePrice(values)}\n                  </h5>\n                  <h4 className={styles.priceLabel}>\n                    Total amount (\n                    <i> {'2.2%'} convenience fee and 18% GST included</i>)\n                  </h4>\n                  <h5 className={styles.price}>\n                    {`Rs `}\n                    {getEmergenceTotalPrice(\n                      getEmergencePrice(values, props.earlybird)\n                    )}\n                    {/* {getPedesTotalPrice(values, getPedesPrice(values))} */}\n                  </h5>\n                  <br />\n                  {/* {JSON.stringify(values, null, 2)}\n                  {JSON.stringify(errors, null, 2)} */}\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      ) : (\n        <div\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            style={{ width: '250px', marginBottom: '20px' }}\n            src=\"/closed.jpg\"\n          />\n          <p style={{ fontSize: '20px' }}>\n            Thank you for your interest. Apparently, the registrations are\n            closed for now.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n\nexport async function getServerSideProps() {\n  try {\n    const price = await axios.get(\n      process.env.NODE_ENV !== 'development'\n        ? 'https://mint-forms.ieee-mint.org/api/form/formDetails?formId=emergence'\n        : 'http://localhost:3000/api/form/formDetails?formId=emergence'\n    );\n\n    return {\n      props: price.data,\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      props: {\n        pricing: {},\n      },\n    };\n  }\n}\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\indicon2022.tsx",["127","128","129","130","131","132"],[],"D:\\Projects\\Github\\mint-forms\\pages\\form\\indicon2022special.tsx",["133","134","135","136"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport FormOptions from '../../UI-Components/FormOptions';\nimport { useState } from 'react';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport PhoneSelector from '../../UI-Components/PhoneSelector';\nimport FormSelect from '../../UI-Components/FormSelect';\nimport FormIEEE from '../../UI-Components/FormIEEE';\nimport getCountryList from '../../utils/getCountryList';\nimport * as yup from 'yup';\n\ninterface types {\n  expiryDate: string;\n}\n\nconst Form: NextPage<types> = (props) => {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n  const [initialVal, setIntialVal] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    ieeeMember: '',\n    membershipId: '',\n    validIEEE: '',\n    address: '',\n    gender: '',\n    country: '',\n    state: '',\n    pincode: '',\n    food: '',\n    institute: '',\n    designation: '',\n    papers: '1',\n    paperId1: '',\n    \n    paperId2: '',\n    passport: '',\n    specialSession: '',\n  });\n  // const [initialVal, setIntialVal] = useState({\n  //   name: 'Test ',\n  //   email: 'abhijithkannan452@gmail.com',\n  //   phone: '+917025263554',\n  //   ieeeMember: 'No',\n  //   validIEEE: '',\n  //   institute: 'CEK',\n  //   designation: 'CEK',\n  //   address: 'XYZ Houser',\n  //   gender: 'Male',\n  //   country: 'India',\n  //   state: 'Kerala',\n  //   pincode: '686019',\n  //   food: 'Veg',\n  //   paperId1: 'asdas',\n  //   extraPage1: 'Not applicable',\n  //   paperId2: '',\n  //   extraPage2: '',\n  //   papers: '1',\n  //   specialSession: 'SS08'\n  // });\n\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required().email(),\n    phone: yup.string().required(),\n    ieeeMember: yup.string().required(),\n    validIEEE: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required('Verify membership ID'),\n    }),\n    address: yup.string().required(),\n    gender: yup.string().required(),\n    country: yup.string().required(),\n    state: yup.string().required(),\n    food: yup.string().required(),\n    pincode: yup.string().required(),\n    institute: yup.string().required(),\n    designation: yup.string().required(),\n    paperId1: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) > 0,\n      then: yup.string().required(),\n    }),\n \n    paperId2: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 2,\n      then: yup.string().required(),\n    }),\n   \n    papers: yup.string().required(),\n    membershipId: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required(),\n    }),\n    specialSession: yup.string().required(),\n  });\n\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      var data = values;\n\n      const formData = buildForm(data);\n      const res = await axios.post(\n        '/api/form/addresponse?formId=indicon2022special',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      router.push(`/confirmation/${res.data.orderId}`);\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>Indicon 2022</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : new Date().toISOString() < props.expiryDate ? (\n        <div className={styles.formContainer}>\n          <img className={styles.formBanner} src=\"/indicon2.png\" />\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>INDICON 2022</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Full name *\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={(e: any) => setFieldValue('name', e.target.value)}\n                    errors={\n                      getIn(errors, 'name') !== undefined\n                        ? getIn(errors, 'name')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Email *\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={(e: any) =>\n                      setFieldValue('email', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'email') !== undefined\n                        ? getIn(errors, 'email')\n                        : ''\n                    }\n                  />\n\n                  <PhoneSelector\n                    label=\"Phone *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={(e: any) => setFieldValue('phone', e)}\n                    errors={\n                      getIn(errors, 'phone') !== undefined\n                        ? getIn(errors, 'phone')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Gender*\"\n                    options={['Male', 'Female']}\n                    value={values.gender}\n                    onChange={(e: any) => setFieldValue('gender', e)}\n                    errors={\n                      getIn(errors, 'gender') !== undefined\n                        ? getIn(errors, 'gender')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Permanent address *\"\n                    placeholder=\"Enter your permanent address\"\n                    value={values.address}\n                    onChange={(e: any) =>\n                      setFieldValue('address', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'address') !== undefined\n                        ? getIn(errors, 'address')\n                        : ''\n                    }\n                  />\n                  <FormSelect\n                    label=\"Country *\"\n                    options={getCountryList}\n                    value={{ label: values.country, value: values.country }}\n                    onChange={(e: any) => setFieldValue('country', e.value)}\n                    errors={\n                      getIn(errors, 'country') !== undefined\n                        ? getIn(errors, 'country')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"State/Province *\"\n                    placeholder=\"Enter your state or province\"\n                    value={values.state}\n                    onChange={(e: any) =>\n                      setFieldValue('state', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'state') !== undefined\n                        ? getIn(errors, 'state')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Pincode *\"\n                    placeholder=\"Enter your pincode\"\n                    value={values.pincode}\n                    onChange={(e: any) =>\n                      setFieldValue('pincode', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'pincode') !== undefined\n                        ? getIn(errors, 'pincode')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Institute *\"\n                    placeholder=\"Enter your institution\"\n                    value={values.institute}\n                    onChange={(e: any) =>\n                      setFieldValue('institute', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'institute') !== undefined\n                        ? getIn(errors, 'institute')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Designation *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.designation}\n                    onChange={(e: any) =>\n                      setFieldValue('designation', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'designation') !== undefined\n                        ? getIn(errors, 'designation')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Are you an IEEE Member*\"\n                    options={['Yes', 'No']}\n                    value={values.ieeeMember}\n                    onChange={(e: any) => setFieldValue('ieeeMember', e)}\n                    errors={\n                      getIn(errors, 'ieeeMember') !== undefined\n                        ? getIn(errors, 'ieeeMember')\n                        : ''\n                    }\n                  />\n                  <FormIEEE\n                    label=\"If yes, enter your membership ID\"\n                    placeholder=\"Enter your IEEE Membership ID \"\n                    value={values.membershipId}\n                    onChange={(e: any) =>\n                      setFieldValue('membershipId', e.target.value)\n                    }\n                    onChangeValid={(e: any) => setFieldValue('validIEEE', e)}\n                    errors={\n                      getIn(errors, 'membershipId') !== undefined\n                        ? getIn(errors, 'membershipId')\n                        : ''\n                    }\n                    vaildError={\n                      getIn(errors, 'validIEEE') !== undefined\n                        ? getIn(errors, 'validIEEE')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Food preference *\"\n                    options={['Veg', 'Non Veg']}\n                    value={values.food}\n                    onChange={(e: any) => setFieldValue('food', e)}\n                    errors={\n                      getIn(errors, 'food') !== undefined\n                        ? getIn(errors, 'food')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Number of papers*\"\n                    options={['1', '2']}\n                    value={values.papers}\n                    onChange={(e: any) => setFieldValue('papers', e)}\n                    errors={\n                      getIn(errors, 'papers') !== undefined\n                        ? getIn(errors, 'papers')\n                        : ''\n                    }\n                  />\n                  {Number(values.papers) > 0 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 1*\"\n                        placeholder=\"Enter your paper id 1\"\n                        value={values.paperId1}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId1', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId1') !== undefined\n                            ? getIn(errors, 'paperId1')\n                            : ''\n                        }\n                      />\n                     \n                    </>\n                  ) : null}\n                  {Number(values.papers) >= 2 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 2*\"\n                        placeholder=\"Enter your paper id 2\"\n                        value={values.paperId2}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId2', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId2') !== undefined\n                            ? getIn(errors, 'paperId2')\n                            : ''\n                        }\n                      />\n                    \n                    </>\n                  ) : null}\n\n                  {values.category !== undefined &&\n                  values.category.includes('Foreign') ? (\n                    <FormInput\n                      label=\"Passport number *\"\n                      placeholder=\"Enter your passport number\"\n                      value={values.passport}\n                      onChange={(e: any) =>\n                        setFieldValue('passport', e.target.value)\n                      }\n                      errors={\n                        getIn(errors, 'passport') !== undefined\n                          ? getIn(errors, 'passport')\n                          : ''\n                      }\n                    />\n                  ) : null}\n                  <FormSelect\n                    label=\"Special Session *\"\n                    options={[\n                      {\n                        value: 'SS01',\n                        label: 'SS01',\n                      },\n                      {\n                        value: 'SS02',\n                        label: 'SS02',\n                      },\n                      {\n                        value: 'SS03',\n                        label: 'SS03',\n                      },\n                      {\n                        value: 'SS04',\n                        label: 'SS04',\n                      },\n                      {\n                        value: 'SS05',\n                        label: 'SS05',\n                      },\n                      {\n                        value: 'SS06',\n                        label: 'SS06',\n                      },\n                      {\n                        value: 'SS07',\n                        label: 'SS07',\n                      },\n                      {\n                        value: 'SS08',\n                        label: 'SS08',\n                      },\n                    ]}\n                    value={{\n                      label: values.specialSession,\n                      value: values.specialSession,\n                    }}\n                    onChange={(e: any) =>\n                      setFieldValue('specialSession', e.value)\n                    }\n                    errors={\n                      getIn(errors, 'specialSession') !== undefined\n                        ? getIn(errors, 'specialSession')\n                        : ''\n                    }\n                  />\n                  {/* {JSON.stringify(values, null, 2)} */}\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n          \n        </div>\n      ) : (\n        <div\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            style={{ width: '250px', marginBottom: '20px' }}\n            src=\"/closed.jpg\"\n          />\n          <p style={{ fontSize: '20px' }}>\n            Thank you for your interest. Apparently, the registrations are\n            closed for now.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n\nexport async function getServerSideProps() {\n  try {\n    const price = await axios.get(\n      process.env.NODE_ENV !== 'development'\n        ? 'https://mint-forms.ieee-mint.org/api/form/formDetails?formId=indicon2022special'\n        : 'http://localhost:3000/api/form/formDetails?formId=indicon2022special'\n    );\n\n    return {\n      props: price.data,\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      props: {\n        pricing: {},\n      },\n    };\n  }\n}\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\paymentStatus.tsx",["137","138"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport displayPaytm from '../../utils/displayPaytm';\nimport * as yup from 'yup';\nimport JSONPretty from 'react-json-pretty';\n\nconst Form: NextPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n  const [response, setResponses] = useState({});\n\n  const [initialVal, setIntialVal] = useState({\n    orderId: '',\n  });\n\n  let schema = yup.object().shape({\n    orderId: yup.string().required(),\n  });\n\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      const res = await axios.get(\n        `/api/pay/paytm/orderStatus?&orderId=${values.orderId}`\n      );\n      setResponses(res.data.responseObject\n        );\n      setLoading(false);\n      // }\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>Amount Transfer</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : (\n        <div className={styles.formContainer}>\n          {/* <img className={styles.formBanner} src=\"/indicon2.png\" /> */}\n          <div className={styles.formDetails}>\n            {/* <p className={styles.subTitle}>REGISTRATION FORM</p> */}\n            <h1 className={styles.formTitle}>Payment Status</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"orderId *\"\n                    placeholder=\"Enter your orderId\"\n                    value={values.orderId}\n                    onChange={(e: any) =>\n                      setFieldValue('orderId', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'orderId') !== undefined\n                        ? getIn(errors, 'orderId')\n                        : ''\n                    }\n                  />\n                <JSONPretty id=\"json-pretty\" data={response}></JSONPretty>\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\pedes2022.tsx",["139","140","141","142","143","144","145"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, useFormikContext, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport FormOptions from '../../UI-Components/FormOptions';\nimport { useEffect, useState, useRef } from 'react';\nimport loadScript from '../../utils/razorpayScript';\nimport { useRouter } from 'next/router';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport displayPaytm from '../../utils/displayPaytm';\nimport PhoneSelector from '../../UI-Components/PhoneSelector';\nimport FormSelect from '../../UI-Components/FormSelect';\nimport FormIEEE from '../../UI-Components/FormIEEE';\nimport getCountryList from '../../utils/getCountryList';\nimport {\n  getPedesPrice,\n  getExtraPagesPrice2,\n  getPedesTotalPrice,\n  getFee,\n} from '../../utils/getPedesPrice';\nimport * as yup from 'yup';\nimport getTotalPrice from '../../utils/getTotalPrice';\n\nconst Form: NextPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n  const [pages, setPages] = useState(0);\n  const [initialVal, setIntialVal] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    ieeeMember: '',\n    membershipId: '',\n    validIEEE: '',\n    citizen: '',\n    address: '',\n    country: '',\n    state: '',\n    pincode: '',\n    institute: '',\n    category: '',\n    papers: '1',\n    paperId1: '',\n    paperId2: '',\n  });\n  // const [initialVal, setIntialVal] = useState({\n  //   name: 'Test ',\n  //   email: 'abhijithkannan452@gmail.com',\n  //   phone: '+917025263554',\n  //   ieeeMember: 'No',\n  //   validIEEE: '',\n  //   institute: 'CEK',\n  //   designation: 'CEK',\n  //   address: 'XYZ Houser',\n  //   gender: 'Male',\n  //   country: 'India',\n  //   state: 'Kerala',\n  //   pincode: '686019',\n  //   citizen: 'Indian',\n  //   category: 'Non-Author Attendee',\n  //   paperId1: 'asdas',\n  //   extraPage1: 'Not applicable',\n  //   paperId2: '',\n  //   extraPage2: '',\n  //   papers: '1',\n  // });\n\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required().email(),\n    phone: yup.string().required(),\n    ieeeMember: yup.string().required(),\n    validIEEE: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required('Verify membership ID'),\n    }),\n    citizen: yup.string().required(),\n    address: yup.string().required(),\n    country: yup.string().required(),\n    state: yup.string().required(),\n    pincode: yup.string().required(),\n    institute: yup.string().required(),\n    category: yup.string().required(),\n    paperId1: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) > 0,\n      then: yup.string().required(),\n    }),\n    extraPage1: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) > 0,\n      then: yup.string().required('Required'),\n    }),\n    paperId2: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 2,\n      then: yup.string().required(),\n    }),\n    extraPage2: yup.string().when('papers', {\n      is: (papers: any) => Number(papers) >= 2,\n      then: yup.string().required(),\n    }),\n    papers: yup.string().required(),\n    membershipId: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required(),\n    }),\n    passport: yup.string().when('category', {\n      is: (category: any) =>\n        category !== undefined && category.includes('Foreign'),\n      then: yup.string().required(),\n    }),\n  });\n\n  const PriceUpdater: Function = () => {\n    const { values, setFieldValue } = useFormikContext<any>();\n    const didMount = useRef(false);\n    useEffect(() => {\n      if (didMount.current) {\n        if (values.papers === 'Not applicable') {\n          setFieldValue('paperId1', '');\n          setFieldValue('paperId2', '');\n          setFieldValue('extraPage1', '');\n          setFieldValue('extraPage2', '');\n        }\n        if (Number(values.papers) === 1) {\n          setFieldValue('paperId2', '');\n          setFieldValue('extraPage2', '');\n        }\n        setPages(getExtraPagesPrice2(values));\n      } else {\n        didMount.current = true;\n      }\n    }, [\n      values.papers,\n      values.ieeeMember,\n      values.category,\n      values.extraPage1,\n      values.extraPage2,\n    ]);\n  };\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      var data = values;\n      data.membershipType = values.ieeeMember\n        ? 'IEEE Member'\n        : 'Non IEEE Member';\n      data.amount = JSON.stringify({\n        currency: values.citizen === 'Foreign' ? 'USD' : 'INR',\n        fee: (\n          getPedesTotalPrice(getPedesPrice(values) + pages, values) -\n          (getPedesPrice(values) + pages) * 1.18\n        ).toFixed(2),\n        ownerAmt: ((getPedesPrice(values) + pages) * 1.18).toFixed(2),\n        amount: getPedesTotalPrice(getPedesPrice(values) + pages, values),\n      });\n\n      const formData = buildForm(data);\n\n      const res = await axios.post(\n        '/api/pay/paytm?formId=pedes2022',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n\n      displayPaytm(res.data);\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  const catgory = [\n    'Non-Author Attendee',\n    'Author (Academia/Industry)',\n    'IEEE Life Fellow/ IEEE Life Member/IEEE Member Professor Emeritus',\n  ];\n  const catgory2 = ['Non-Author Attendee', 'Author (Academia/Industry)'];\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>PEDES 2022</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : (\n        <div className={styles.formContainer}>\n          <img className={styles.formBanner} src=\"/pedes.png\" />\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>PEDES 2022</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Full name *\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={(e: any) => setFieldValue('name', e.target.value)}\n                    errors={\n                      getIn(errors, 'name') !== undefined\n                        ? getIn(errors, 'name')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Email *\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={(e: any) =>\n                      setFieldValue('email', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'email') !== undefined\n                        ? getIn(errors, 'email')\n                        : ''\n                    }\n                  />\n\n                  <PhoneSelector\n                    label=\"Phone *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={(e: any) => setFieldValue('phone', e)}\n                    errors={\n                      getIn(errors, 'phone') !== undefined\n                        ? getIn(errors, 'phone')\n                        : ''\n                    }\n                  />\n\n                  <FormInput\n                    label=\"Permanent address *\"\n                    placeholder=\"Enter your permanent address\"\n                    value={values.address}\n                    onChange={(e: any) =>\n                      setFieldValue('address', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'address') !== undefined\n                        ? getIn(errors, 'address')\n                        : ''\n                    }\n                  />\n                  <FormSelect\n                    label=\"Country *\"\n                    options={getCountryList}\n                    value={{ label: values.country, value: values.country }}\n                    onChange={(e: any) => setFieldValue('country', e.value)}\n                    errors={\n                      getIn(errors, 'country') !== undefined\n                        ? getIn(errors, 'country')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"State/Province *\"\n                    placeholder=\"Enter your state or province\"\n                    value={values.state}\n                    onChange={(e: any) =>\n                      setFieldValue('state', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'state') !== undefined\n                        ? getIn(errors, 'state')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Pincode *\"\n                    placeholder=\"Enter your pincode\"\n                    value={values.pincode}\n                    onChange={(e: any) =>\n                      setFieldValue('pincode', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'pincode') !== undefined\n                        ? getIn(errors, 'pincode')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Institute *\"\n                    placeholder=\"Enter your institution\"\n                    value={values.institute}\n                    onChange={(e: any) =>\n                      setFieldValue('institute', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'institute') !== undefined\n                        ? getIn(errors, 'institute')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Are you an IEEE Member*\"\n                    options={['Yes', 'No']}\n                    value={values.ieeeMember}\n                    onChange={(e: any) => setFieldValue('ieeeMember', e)}\n                    errors={\n                      getIn(errors, 'ieeeMember') !== undefined\n                        ? getIn(errors, 'ieeeMember')\n                        : ''\n                    }\n                  />\n                  <FormIEEE\n                    label=\"If yes, enter your membership ID\"\n                    placeholder=\"Enter your IEEE Membership ID \"\n                    value={values.membershipId}\n                    onChange={(e: any) =>\n                      setFieldValue('membershipId', e.target.value)\n                    }\n                    onChangeValid={(e: any) => setFieldValue('validIEEE', e)}\n                    errors={\n                      getIn(errors, 'membershipId') !== undefined\n                        ? getIn(errors, 'membershipId')\n                        : ''\n                    }\n                    vaildError={\n                      getIn(errors, 'validIEEE') !== undefined\n                        ? getIn(errors, 'validIEEE')\n                        : ''\n                    }\n                  />\n                  <FormOptions\n                    label=\"Citizenship*\"\n                    options={['Indian', 'Foreign']}\n                    value={values.citizen}\n                    onChange={(e: any) => setFieldValue('citizen', e)}\n                    errors={\n                      getIn(errors, 'citizen') !== undefined\n                        ? getIn(errors, 'citizen')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Number of papers*\"\n                    options={['1', '2', 'Not applicable']}\n                    value={values.papers}\n                    onChange={(e: any) => setFieldValue('papers', e)}\n                    errors={\n                      getIn(errors, 'papers') !== undefined\n                        ? getIn(errors, 'papers')\n                        : ''\n                    }\n                  />\n                  {Number(values.papers) > 0 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 1*\"\n                        placeholder=\"Enter your paper id 1\"\n                        value={values.paperId1}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId1', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId1') !== undefined\n                            ? getIn(errors, 'paperId1')\n                            : ''\n                        }\n                      />\n                      <FormOptions\n                        label=\"Whether the paper 1 has exceed the 6 page limit ? if yes by how many extra pages ?*\"\n                        options={['Not applicable', '1', '2']}\n                        value={values.extraPage1}\n                        onChange={(e: any) => setFieldValue('extraPage1', e)}\n                        errors={\n                          getIn(errors, 'extraPage1') !== undefined\n                            ? getIn(errors, 'extraPage1')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n                  {Number(values.papers) >= 2 ? (\n                    <>\n                      <FormInput\n                        label=\"Paper ID 2*\"\n                        placeholder=\"Enter your paper id 2\"\n                        value={values.paperId2}\n                        onChange={(e: any) =>\n                          setFieldValue('paperId2', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'paperId2') !== undefined\n                            ? getIn(errors, 'paperId2')\n                            : ''\n                        }\n                      />\n                      <FormOptions\n                        label=\"Whether the paper 2 has exceed the 6 page limit ? if yes by how many extra pages ?*\"\n                        options={['Not applicable', '1', '2']}\n                        value={values.extraPage2}\n                        onChange={(e: any) => setFieldValue('extraPage2', e)}\n                        errors={\n                          getIn(errors, 'extraPage2') !== undefined\n                            ? getIn(errors, 'extraPage2')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n\n                  <FormOptions\n                    label=\"Category *\"\n                    options={values.validIEEE === 'true' ? catgory : catgory2}\n                    value={values.category}\n                    onChange={(e: any) => setFieldValue('category', e)}\n                    errors={\n                      getIn(errors, 'category') !== undefined\n                        ? getIn(errors, 'category')\n                        : ''\n                    }\n                  />\n\n                  <PriceUpdater />\n                  <h4 className={styles.breakDownLabel}>Amount to be paid</h4>\n                  <h5 className={styles.singlePrice}>\n                    {values.citizen === 'Foreign' ? '$ ' : 'Rs '}\n                    {getPedesPrice(values)}\n                  </h5>\n                  <h4 className={styles.breakDownLabel}>\n                    Amount based on extra pages\n                  </h4>\n                  <h5 className={styles.singlePrice}>\n                    {values.citizen === 'Foreign' ? '$ ' : 'Rs '}\n                    {getPedesPrice(values)}\n                  </h5>\n                  <h4 className={styles.priceLabel}>\n                    Total amount (\n                    <i>\n                      {' '}\n                      {values.citizen === 'Foreign' ? '3.05%' : '2.05%'}{' '}\n                      convenience fee and 18% GST included\n                    </i>\n                    )\n                  </h4>\n                  <h5 className={styles.price}>\n                    {values.citizen === 'Foreign' ? '$ ' : 'Rs '}\n                    {getPedesTotalPrice(getPedesPrice(values) + pages, values)}\n                    {/* {getPedesTotalPrice(values, getPedesPrice(values))} */}\n                  </h5>\n                  <br />\n                  {/* {JSON.stringify(errors, null, 2)} */}\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\test.tsx",["146","147","148"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport displayPaytm from '../../utils/displayPaytm';\nimport * as yup from 'yup';\nimport { config } from 'dotenv';\nconst {\n  CheckoutProvider,\n  Checkout,\n  injectCheckout,\n} = require('paytm-blink-checkout-react');\n\nconst Form: NextPage = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  const [initialVal, setIntialVal] = useState({\n    amount: '100',\n    accountId: 'TZIemPYk892862475294',\n    partnerId: 'jacob01',\n    splitAmnt: '80',\n  });\n  const [config, setConfig] = useState({});\n\n  let schema = yup.object().shape({\n    amount: yup.string().required(),\n    accountId: yup.string().required(),\n    partnerId: yup.string().required(),\n    splitAmnt: yup.string().required(),\n  });\n\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    // setLoading(true);\n    try {\n      var data = values;\n      data.amount = JSON.stringify({\n        currency: 'INR',\n        amount: values.amount,\n        ownerAmt: values.splitAmnt,\n      });\n\n      const formData = buildForm(data);\n\n      const res = await axios.post(\n        '/api/pay/paytm/transfer?formId=transfer',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      // mid: process.env.Merchant_Id,\n      // orderId: paytmParams.body.orderId,\n      // CHECKSUMHASH: res.data.head.signature,\n      // txnToken: res.data.body.txnToken,\n      // TXN_AMOUNT: txnInfo.amount,\n      // WEBSITE: 'WEBSTAGING',\n      // displayPaytm(res.data);\n      setLoading(false);\n      setConfig({\n        root: '',\n        flow: 'DEFAULT',\n        data: {\n          orderId: res.data.orderId /* update order id */,\n          token: res.data.txnToken /* update token value */,\n          tokenType: 'TXN_TOKEN',\n          amount: res.data.TXN_AMOUNT /* update amount */,\n        },\n        merchant: {\n          mid: res.data.mid,\n          logo: '/header.png',\n        },\n        handler: {\n          notifyMerchant: function (eventName: any, data: any) {\n            console.log('notifyMerchant handler function called');\n            console.log('eventName => ', eventName);\n            console.log('data => ', data);\n          },\n        },\n      });\n      // }\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>Amount Transfer</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : (\n        <div className={styles.formContainer}>\n          {/* <img className={styles.formBanner} src=\"/indicon2.png\" /> */}\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>Amount Transfer</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Amount *\"\n                    placeholder=\"Enter your total amount\"\n                    value={values.amount}\n                    onChange={(e: any) =>\n                      setFieldValue('amount', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'amount') !== undefined\n                        ? getIn(errors, 'amount')\n                        : ''\n                    }\n                  />\n\n                  <FormInput\n                    label=\"Account ID *\"\n                    placeholder=\"Enter your Account ID \"\n                    value={values.accountId}\n                    onChange={(e: any) =>\n                      setFieldValue('accountId', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'accountId') !== undefined\n                        ? getIn(errors, 'accountId')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Partner ID *\"\n                    placeholder=\"Enter your Account ID \"\n                    value={values.partnerId}\n                    onChange={(e: any) =>\n                      setFieldValue('partnerId', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'partnerId') !== undefined\n                        ? getIn(errors, 'partnerId')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Amount to be send to split account *\"\n                    placeholder=\"Enter your Account ID \"\n                    value={values.splitAmnt}\n                    onChange={(e: any) =>\n                      setFieldValue('splitAmnt', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'splitAmnt') !== undefined\n                        ? getIn(errors, 'splitAmnt')\n                        : ''\n                    }\n                  />\n                  {/* <FormOptions\n                    label=\"Gender*\"\n                    options={['Male', 'Female']}\n                    value={values.gender}\n                    onChange={(e: any) => setFieldValue('gender', e)}\n                    errors={\n                      getIn(errors, 'gender') !== undefined\n                        ? getIn(errors, 'gender')\n                        : ''\n                    }\n                  />\n                 \n                  <FormSelect\n                    label=\"Country *\"\n                    options={getCountryList}\n                    value={{ label: values.country, value: values.country }}\n                    onChange={(e: any) => setFieldValue('country', e.value)}\n                    errors={\n                      getIn(errors, 'country') !== undefined\n                        ? getIn(errors, 'country')\n                        : ''\n                    }\n                  /> */}\n\n                  <CheckoutProvider\n                    config={config}\n                    env={\n                      'PROD'\n                    }\n                  >\n                    <Checkout />\n                  </CheckoutProvider>\n\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n","D:\\Projects\\Github\\mint-forms\\pages\\form\\ypupskill.tsx",["149","150","151","152"],[],"import type { NextPage } from 'next';\nimport styles from '../../styles/Form.module.css';\nimport FormInput from '../../UI-Components/FormInput';\nimport FormTextArea from '../../UI-Components/FormTextArea';\nimport { Formik, getIn, FormikProps } from 'formik';\nimport axios from 'axios';\nimport FormOptions from '../../UI-Components/FormOptions';\nimport { useState } from 'react';\nimport Error from '../../UI-Components/error';\nimport Loader from '../../UI-Components/loader';\nimport buildForm from '../../utils/buildForm';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport PhoneSelector from '../../UI-Components/PhoneSelector';\nimport FormSelect from '../../UI-Components/FormSelect';\nimport FormIEEE from '../../UI-Components/FormIEEE';\nimport getStateList from '../../utils/getStateList';\nimport * as yup from 'yup';\n\ninterface types {\n  expiryDate: string;\n}\n\nconst Form: NextPage<types> = (props) => {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(false);\n  const [initialVal, setIntialVal] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    state: '',\n    type: '',\n    institute: '',\n    field: '',\n    ieeeMember: 'No',\n    validIEEE: '',\n    section: '',\n    volunteering: '',\n  });\n  // const [initialVal, setIntialVal] = useState({\n  //   name: 'Test ',\n  //   email: 'abhijithkannan452@gmail.com',\n  //   phone: '+917025263554',\n  //   ieeeMember: 'No',\n  //   validIEEE: '',\n  //   institute: 'CEK',\n  //   designation: 'CEK',\n  //   address: 'XYZ Houser',\n  //   gender: 'Male',\n  //   country: 'India',\n  //   state: 'Kerala',\n  //   pincode: '686019',\n  //   food: 'Veg',\n  //   paperId1: 'asdas',\n  //   extraPage1: 'Not applicable',\n  //   paperId2: '',\n  //   extraPage2: '',\n  //   papers: '1',\n  //   specialSession: 'SS08'\n  // });\n\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required().email(),\n    phone: yup.string().required(),\n    state: yup.string().required(),\n    institute: yup.string(),\n    type: yup.string().required(),\n    field: yup.string(),\n    volunteering: yup.string(),\n    ieeeMember: yup.string().required(),\n    validIEEE: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required('Verify membership ID'),\n    }),\n    membershipId: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required(),\n    }),\n    section: yup.string().when('ieeeMember', {\n      is: 'Yes',\n      then: yup.string().required(),\n    }),\n  });\n\n  const handleAxiosError = (err: any) => {\n    setError(true);\n    setErrorMsg(err.response !== undefined ? err.response.data.error : err);\n    setLoading(false);\n  };\n\n  const handleUpload = async (values: any) => {\n    setIntialVal(values);\n    setLoading(true);\n    try {\n      var data = values;\n\n      const formData = buildForm(data);\n      const res = await axios.post(\n        '/api/form/addresponse?formId=ypupskill',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      router.push(`/confirmation/${res.data.orderId}`);\n    } catch (err: any) {\n      handleAxiosError(err);\n    }\n  };\n\n  return (\n    <div className={styles.form}>\n      <Head>\n        <title>Indicon 2022</title>\n      </Head>\n      {loading ? (\n        <>\n          <Loader msg=\"Don't refresh this page. Redirecting to payment processing service ...\" />\n        </>\n      ) : new Date().toISOString() < props.expiryDate ? (\n        <div className={styles.formContainer}>\n          <img className={styles.formBanner} src=\"/upskill.jpg\" />\n          <div className={styles.formDetails}>\n            <p className={styles.subTitle}>REGISTRATION FORM</p>\n            <h1 className={styles.formTitle}>UPSkill 2022</h1>\n            {/* <p className={styles.formDescription}>\n              To ride a vehicle I worked on back home in New Zealand has always\n              been a dream, to share it with so many like minded people at\n              Ducati Owners Club NZ is even better. Credit to Aaron Staples for\n              the great shots.\n            </p> */}\n          </div>\n          {error ? <Error setError={setError} msg={errorMsg} /> : null}\n          <div className={styles.formContent}>\n            <Formik\n              initialValues={initialVal}\n              validationSchema={schema}\n              onSubmit={(values) => handleUpload(values)}\n            >\n              {({\n                values,\n                errors,\n                handleSubmit,\n                setFieldValue,\n              }: FormikProps<any>) => (\n                <div>\n                  <FormInput\n                    label=\"Full name *\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={(e: any) => setFieldValue('name', e.target.value)}\n                    errors={\n                      getIn(errors, 'name') !== undefined\n                        ? getIn(errors, 'name')\n                        : ''\n                    }\n                  />\n                  <FormInput\n                    label=\"Email *\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={(e: any) =>\n                      setFieldValue('email', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'email') !== undefined\n                        ? getIn(errors, 'email')\n                        : ''\n                    }\n                  />\n\n                  <PhoneSelector\n                    label=\"Phone *\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={(e: any) => setFieldValue('phone', e)}\n                    errors={\n                      getIn(errors, 'phone') !== undefined\n                        ? getIn(errors, 'phone')\n                        : ''\n                    }\n                  />\n\n                  <FormSelect\n                    label=\"State *\"\n                    options={getStateList}\n                    value={{ label: values.state, value: values.state }}\n                    onChange={(e: any) => setFieldValue('state', e.value)}\n                    errors={\n                      getIn(errors, 'state') !== undefined\n                        ? getIn(errors, 'state')\n                        : ''\n                    }\n                  />\n\n                  <FormInput\n                    label=\"Institution/Company\"\n                    placeholder=\"Enter your institution\"\n                    value={values.institute}\n                    onChange={(e: any) =>\n                      setFieldValue('institute', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'institute') !== undefined\n                        ? getIn(errors, 'institute')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Type *\"\n                    options={['Student', 'Working Professional']}\n                    value={values.type}\n                    onChange={(e: any) => setFieldValue('type', e)}\n                    errors={\n                      getIn(errors, 'type') !== undefined\n                        ? getIn(errors, 'type')\n                        : ''\n                    }\n                  />\n                  <FormTextArea\n                    label=\"Previous volunteering experince wiith IEEE or any other organizations\"\n                    placeholder=\"Enter your previous volunteering experince\"\n                    value={values.volunteering}\n                    name=\"\"\n                    onChange={(e: any) =>\n                      setFieldValue('volunteering', e.target.value)\n                    }\n                    errors={\n                      getIn(errors, 'volunteering') !== undefined\n                        ? getIn(errors, 'volunteering')\n                        : ''\n                    }\n                  />\n\n                  <FormOptions\n                    label=\"Are you an IEEE Member*\"\n                    options={['Yes', 'No']}\n                    value={values.ieeeMember}\n                    onChange={(e: any) => setFieldValue('ieeeMember', e)}\n                    errors={\n                      getIn(errors, 'ieeeMember') !== undefined\n                        ? getIn(errors, 'ieeeMember')\n                        : ''\n                    }\n                  />\n                  {values.ieeeMember === 'Yes' ? (\n                    <>\n                      <FormIEEE\n                        label=\"If yes, enter your membership ID\"\n                        placeholder=\"Enter your IEEE Membership ID \"\n                        value={values.membershipId}\n                        onChange={(e: any) =>\n                          setFieldValue('membershipId', e.target.value)\n                        }\n                        onChangeValid={(e: any) =>\n                          setFieldValue('validIEEE', e)\n                        }\n                        errors={\n                          getIn(errors, 'membershipId') !== undefined\n                            ? getIn(errors, 'membershipId')\n                            : ''\n                        }\n                        vaildError={\n                          getIn(errors, 'validIEEE') !== undefined\n                            ? getIn(errors, 'validIEEE')\n                            : ''\n                        }\n                      />\n                      <FormInput\n                        label=\"Section *\"\n                        placeholder=\"Enter your institution\"\n                        value={values.section}\n                        onChange={(e: any) =>\n                          setFieldValue('section', e.target.value)\n                        }\n                        errors={\n                          getIn(errors, 'section') !== undefined\n                            ? getIn(errors, 'section')\n                            : ''\n                        }\n                      />\n                    </>\n                  ) : null}\n\n                  {/* {JSON.stringify(values, null, 2)} */}\n                  <button\n                    className={styles.button}\n                    type=\"submit\"\n                    onClick={() => handleSubmit()}\n                  >\n                    SUBMIT\n                  </button>\n                </div>\n              )}\n            </Formik>\n\n            <footer className={styles.footer}>\n              <p>\n                This content is created by the owner of the form. The data you\n                submit will be sent to the form owner. IEEE Kerala Section is\n                not responsible for the privacy or security practices of its\n                customers, including those of this form owner. Never give out\n                your password.\n              </p>\n              <br />\n              Powered by IKS Mint Forms |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/privacy\">\n                Privacy and cookies\n              </a>{' '}\n              |{' '}\n              <a style={{ color: 'blue' }} href=\"https://ieee-mint.org/terms\">\n                Terms of use\n              </a>\n            </footer>\n          </div>\n        </div>\n      ) : (\n        <div\n          style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            style={{ width: '250px', marginBottom: '20px' }}\n            src=\"/closed.jpg\"\n          />\n          <p style={{ fontSize: '20px' }}>\n            Thank you for your interest. Apparently, the registrations are\n            closed for now.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n\nexport async function getServerSideProps() {\n  try {\n    const price = await axios.get(\n      process.env.NODE_ENV !== 'development'\n        ? 'https://mint-forms.ieee-mint.org/api/form/formDetails?formId=indicon2022special'\n        : 'http://localhost:3000/api/form/formDetails?formId=indicon2022special'\n    );\n\n    return {\n      props: price.data,\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      props: {\n        pricing: {},\n      },\n    };\n  }\n}\n","D:\\Projects\\Github\\mint-forms\\pages\\index.tsx",[],[],"D:\\Projects\\Github\\mint-forms\\pages\\[formId]\\responses.js",[],[],"D:\\Projects\\Github\\mint-forms\\pages\\_app.tsx",[],[],"D:\\Projects\\Github\\mint-forms\\components\\addResponses\\index.js",[],[],"D:\\Projects\\Github\\mint-forms\\components\\sendMail\\index.js",["153"],[],"import styles from \"./Styles.module.css\";\nimport Loader from \"../../UI-Components/loader\";\nimport Input from \"../../UI-Components/CustomInput/input3\";\nimport TextArea from \"../../UI-Components/CustomTextarea\";\nimport { Formik, getIn } from \"formik\";\nimport RichEditor from \"../../UI-Components/RichEditor\";\nimport * as yup from \"yup\";\n\nexport default function SendMail({ setModal, data, handleSubmit, loading }) {\n  const initailData = {\n    to:\n      data !== [] && data.length > 0\n        ? data.map((val) => val.email).toString()\n        : \"\",\n    subject: \"\",\n    msg: \"\",\n  };\n\n  let schema = yup.object().shape({\n    to: yup.string().required(\"Required\"),\n    subject: yup.string().required(\"Required\"),\n    msg: yup.string().required(\"Required\"),\n  });\n\n  const wrapperStyle = {\n    // border: \"1px solid #969696\",\n  };\n\n  const editorStyle = {\n    height: \"10rem\",\n    // padding: \"1rem\",\n    fontSize:\"14px\"\n  };\n\n  return (\n    <div className={styles.modal}>\n      <div\n        className={styles.modal_overlay}\n        onClick={() => setModal(false)}\n      ></div>\n      <div className={styles.modal_con}>\n        <h4>Send mail</h4>\n        {loading ? (\n          <Loader />\n        ) : (\n          <Formik\n            initialValues={initailData}\n            validationSchema={schema}\n            onSubmit={(values) => {\n              handleSubmit(values);\n            }}\n          >\n            {({ values, setFieldValue, handleSubmit, errors }) => (\n              <>\n                <Input\n                  // label=\"To\"\n                  value={values.to}\n                  disabled={loading}\n                  placeholder=\"Enter the email seperated by commas\"\n                  error={getIn(errors, \"to\") !== undefined ? true : false}\n                  errMsg={\n                    getIn(errors, \"to\") !== undefined ? getIn(errors, \"to\") : \"\"\n                  }\n                  onChange={(e) => setFieldValue(\"to\", e.target.value)}\n                />\n                <Input\n                  // label=\"Subject\"\n                  value={values.subject}\n                  disabled={loading}\n                  placeholder=\"Enter the subject\"\n                  error={getIn(errors, \"subject\") !== undefined ? true : false}\n                  errMsg={\n                    getIn(errors, \"subject\") !== undefined\n                      ? getIn(errors, \"subject\")\n                      : \"\"\n                  }\n                  onChange={(e) => setFieldValue(\"subject\", e.target.value)}\n                />\n\n                <RichEditor\n                  // label=\"Message\"\n                  wrapperStyle={wrapperStyle}\n                  editorStyle={editorStyle}    \n                  state={values.msg}\n                  placeholder=\"Enter the message\"\n                  error={getIn(errors, \"msg\") !== undefined ? true : false}\n                  errMsg={\n                    getIn(errors, \"msg\") !== undefined\n                      ? getIn(errors, \"msg\")\n                      : \"\"\n                  }\n                  setState={(content) => setFieldValue(\"msg\", content)}\n                />\n                {/* <TextArea\n                  label=\"Message\"\n                  value={values.msg}\n                  disabled={loading}\n                  placeholder=\"Enter the message\"\n                  error={getIn(errors, \"msg\") !== undefined ? true : false}\n                  errMsg={getIn(errors, \"msg\") !== undefined ? getIn(errors, \"msg\") : \"\"}\n                  onChange={(e) => setFieldValue(\"msg\", e.target.value)} /> */}\n                <div className={styles.modal_con_buttons}>\n                  <button\n                    className={styles.buttons_first}\n                    disabled={loading}\n                    onClick={handleSubmit}\n                  >\n                    Sent\n                  </button>\n                  <button\n                    className={styles.buttons_first}\n                    disabled={loading}\n                    onClick={() => setModal(false)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </>\n            )}\n          </Formik>\n        )}\n      </div>\n    </div>\n  );\n}\n","D:\\Projects\\Github\\mint-forms\\components\\sidebar\\index.tsx",[],[],"D:\\Projects\\Github\\mint-forms\\components\\topNav\\index.tsx",[],[],{"ruleId":"154","severity":1,"message":"155","line":104,"column":6,"nodeType":"156","endLine":104,"endColumn":28,"suggestions":"157"},{"ruleId":"154","severity":1,"message":"158","line":59,"column":6,"nodeType":"156","endLine":59,"endColumn":42,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":34,"column":3,"nodeType":"162","messageId":"163","endLine":34,"endColumn":8},{"ruleId":"154","severity":1,"message":"164","line":172,"column":8,"nodeType":"156","endLine":179,"endColumn":6,"suggestions":"165"},{"ruleId":"160","severity":1,"message":"166","line":181,"column":18,"nodeType":"162","messageId":"163","endLine":181,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":306,"column":11,"nodeType":"169","endLine":306,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":306,"column":11,"nodeType":"169","endLine":306,"endColumn":68},{"ruleId":"167","severity":1,"message":"168","line":72,"column":9,"nodeType":"169","endLine":72,"endColumn":65},{"ruleId":"170","severity":1,"message":"171","line":72,"column":9,"nodeType":"169","endLine":72,"endColumn":65},{"ruleId":"167","severity":1,"message":"168","line":158,"column":11,"nodeType":"169","endLine":158,"endColumn":70},{"ruleId":"170","severity":1,"message":"171","line":158,"column":11,"nodeType":"169","endLine":158,"endColumn":70},{"ruleId":"167","severity":1,"message":"168","line":425,"column":11,"nodeType":"169","endLine":428,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":425,"column":11,"nodeType":"169","endLine":428,"endColumn":13},{"ruleId":"160","severity":1,"message":"172","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":18},{"ruleId":"154","severity":1,"message":"164","line":174,"column":8,"nodeType":"156","endLine":181,"endColumn":6,"suggestions":"173"},{"ruleId":"167","severity":1,"message":"168","line":324,"column":11,"nodeType":"169","endLine":324,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":324,"column":11,"nodeType":"169","endLine":324,"endColumn":68},{"ruleId":"167","severity":1,"message":"168","line":728,"column":11,"nodeType":"169","endLine":731,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":728,"column":11,"nodeType":"169","endLine":731,"endColumn":13},{"ruleId":"167","severity":1,"message":"168","line":146,"column":11,"nodeType":"169","endLine":146,"endColumn":68},{"ruleId":"170","severity":1,"message":"171","line":146,"column":11,"nodeType":"169","endLine":146,"endColumn":68},{"ruleId":"167","severity":1,"message":"168","line":493,"column":11,"nodeType":"169","endLine":496,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":493,"column":11,"nodeType":"169","endLine":496,"endColumn":13},{"ruleId":"160","severity":1,"message":"174","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":17},{"ruleId":"160","severity":1,"message":"175","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":20},{"ruleId":"160","severity":1,"message":"172","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":18},{"ruleId":"160","severity":1,"message":"176","line":9,"column":10,"nodeType":"162","messageId":"163","endLine":9,"endColumn":19},{"ruleId":"160","severity":1,"message":"177","line":23,"column":3,"nodeType":"162","messageId":"163","endLine":23,"endColumn":9},{"ruleId":"160","severity":1,"message":"178","line":26,"column":8,"nodeType":"162","messageId":"163","endLine":26,"endColumn":21},{"ruleId":"154","severity":1,"message":"164","line":136,"column":8,"nodeType":"156","endLine":142,"endColumn":6,"suggestions":"179"},{"ruleId":"167","severity":1,"message":"168","line":203,"column":11,"nodeType":"169","endLine":203,"endColumn":65},{"ruleId":"170","severity":1,"message":"171","line":203,"column":11,"nodeType":"169","endLine":203,"endColumn":65},{"ruleId":"160","severity":1,"message":"175","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":20},{"ruleId":"160","severity":1,"message":"180","line":13,"column":10,"nodeType":"162","messageId":"163","endLine":13,"endColumn":16},{"ruleId":"160","severity":1,"message":"181","line":17,"column":3,"nodeType":"162","messageId":"163","endLine":17,"endColumn":17},{"ruleId":"167","severity":1,"message":"168","line":127,"column":11,"nodeType":"169","endLine":127,"endColumn":67},{"ruleId":"170","severity":1,"message":"171","line":127,"column":11,"nodeType":"169","endLine":127,"endColumn":67},{"ruleId":"167","severity":1,"message":"168","line":334,"column":11,"nodeType":"169","endLine":337,"endColumn":13},{"ruleId":"170","severity":1,"message":"171","line":334,"column":11,"nodeType":"169","endLine":337,"endColumn":13},{"ruleId":"160","severity":1,"message":"182","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'displayRazorpay' and 'router.query.paymentProvider'. Either include them or remove the dependency array.","ArrayExpression",["183"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["184"],"no-unused-vars","'index' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'setFieldValue' and 'values'. Either include them or remove the dependency array.",["185"],"'displayRazorPay' is defined but never used.","@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'loadScript' is defined but never used.",["186"],"'buildForm' is defined but never used.","'displayPaytm' is defined but never used.","'useRouter' is defined but never used.","'getFee' is defined but never used.","'getTotalPrice' is defined but never used.",["187"],"'config' is defined but never used.","'injectCheckout' is assigned a value but never used.","'TextArea' is defined but never used.",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [displayRazorpay, router.query.orderId, router.query.paymentProvider]",{"range":"197","text":"198"},"Update the dependencies array to be: [getData, router.query.id, router.query.type]",{"range":"199","text":"200"},"Update the dependencies array to be: [values.papers, values.ieeeMember, values.category, values.extraPage1, values.extraPage2, values.extraPage3, values, setFieldValue]",{"range":"201","text":"202"},{"range":"203","text":"202"},"Update the dependencies array to be: [values.papers, values.ieeeMember, values.category, values.extraPage1, values.extraPage2, values, setFieldValue]",{"range":"204","text":"205"},[3232,3254],"[displayRazorpay, router.query.orderId, router.query.paymentProvider]",[1444,1480],"[getData, router.query.id, router.query.type]",[5661,5812],"[values.papers, values.ieeeMember, values.category, values.extraPage1, values.extraPage2, values.extraPage3, values, setFieldValue]",[5645,5796],[4394,4520],"[values.papers, values.ieeeMember, values.category, values.extraPage1, values.extraPage2, values, setFieldValue]"]